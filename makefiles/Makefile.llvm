#
# Makefile - create llvm/clang
# Copyright (C) 2015-2016 Heiko Abraham
# All rights reserved.
#

include Makefile.def

TARGET=arm-none-eabi

.PHONY: build
build:
	$(MAKE) -f $(MAKEFILENAME) $(PREFIX)/bin/$(TARGET)-clang


.PHONY: clean
clean:
	$(RM) -f $(PREFIX)/bin/$(TARGET)-clang
	$(RM) -rf    $(BUILD_DIR)/$(LLVM_VERSION)
	$(RM) -rf    $(BUILD_DIR)/$(LLVM_VERSION).src
	$(RM) -rf    $(BUILD_DIR)/$(LLVM_VERSION).build


.PHONY: install
install:


$(PREFIX)/bin/$(TARGET)-clang:
	$(MAKE) -f $(MAKEFILENAME) build_clang


.PHONY: extract_clang
extract_clang:
	( cd $(BUILD_DIR)/$(LLVM_VERSION).src/tools/ && $(RM) -rf $(CLANG_VERSION) )
	( cd $(BUILD_DIR)/$(LLVM_VERSION).src/tools/ && $(RM) -rf $(CLANG_VERSION).src )
	tar -xJf $(DOWNLOAD_DIR)/$(CLANG_VERSION).tar.xz -C $(BUILD_DIR)/$(LLVM_VERSION).src/tools/
	( cd $(BUILD_DIR)/$(LLVM_VERSION).src/tools && mv $(CLANG_VERSION).src clang )


.PHONY: extract_lldb
extract_lldb:
	( cd $(BUILD_DIR)/$(LLVM_VERSION).src/tools/ && $(RM) -rf $(LLDB_VERSION) )
	( cd $(BUILD_DIR)/$(LLVM_VERSION).src/tools/ && $(RM) -rf $(LLDB_VERSION).src )
	tar -xJf $(DOWNLOAD_DIR)/$(LLDB_VERSION).tar.xz -C $(BUILD_DIR)/$(LLVM_VERSION).src/tools/
	( cd $(BUILD_DIR)/$(LLVM_VERSION).src/tools && mv $(LLDB_VERSION).src lldb )
	# patch remove-debug-server


.PHONY: build_clang
build_clang: $(BUILD_DIR)
	env
	$(RM) -rf    $(BUILD_DIR)/$(LLVM_VERSION)
	$(RM) -rf    $(BUILD_DIR)/$(LLVM_VERSION).src
	$(RM) -rf    $(BUILD_DIR)/$(LLVM_VERSION).build
	$(MKDIR) -p  $(BUILD_DIR)/$(LLVM_VERSION).build
	tar -xJf $(DOWNLOAD_DIR)/$(LLVM_VERSION).tar.xz -C $(BUILD_DIR)
	$(MAKE) -f $(MAKEFILENAME) CVER=$(CVER) extract_clang
	# $(MAKE) -f $(MAKEFILENAME) CVER=$(CVER) extract_lldb
	( cd $(BUILD_DIR)/$(LLVM_VERSION).build && \
		$(PATH_EXT) cmake ../$(LLVM_VERSION).src \
		-G "Unix Makefiles" \
		-DCMAKE_BUILD_TYPE=Release \
		-DCMAKE_INSTALL_PREFIX=$(PREFIX) \
		-DCMAKE_PREFIX_PATH=$(PREFIX)/prefix_path \
		-DCMAKE_CROSSCOMPILING=True \
		-DLLVM_TARGETS_TO_BUILD=ARM \
		-DLLVM_DEFAULT_TARGET_TRIPLE=$(TARGET) \
		-DCMAKE_PROGRAM_PREFIX=$(TARGET)- \
		-DLLVM_TARGET_ARCH=host \
		-DLLVM_ENABLE_PIC=True \
		-DLLVM_ENABLE_THREADS=ON \
		-DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
		-DLLVM_ENABLE_CXX1Y:BOOL=ON \
		-DLLVM_BUILD_DOCS=Off \
		-DLLVM_BUILD_LLVM_DYLIB=ON \
		-DLLVM_LINK_LLVM_DYLIB=ON \
		-DLLVM_CREATE_XCODE_TOOLCHAIN:BOOL=OFF \
		-DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
		-DLLVM_PARALLEL_COMPILE_JOBS:STRING=$(NUM_CPUS) \
		-DLLDB_DISABLE_LIBEDIT=1 \
		-DLLDB_DISABLE_CURSES=1 \
		-DLLDB_DISABLE_PYTHON=1 )
	( cd $(BUILD_DIR)/$(LLVM_VERSION).build && \
		$(PATH_EXT) time make $(MJOBS) )
	( cd $(BUILD_DIR)/$(LLVM_VERSION).build && \
		$(PATH_EXT) time make install )
	( cd $(PREFIX)/bin && mv clang $(TARGET)-clang )
	( cd $(PREFIX)/bin && mv clang++ $(TARGET)-clang++ )
	$(MKDIR) -p $(PREFIX)/local/include
	( cd $(PREFIX)/lib/clang && ln -s $(LLVM_VERSION_NO) current )
	$(MAKE) -f $(MAKEFILENAME) build_rt


.PHONY: build_rt
build_rt:
	$(RM) -rf   $(BUILD_DIR)/$(COMPILER_RT_VERSION).src
	$(RM) -rf   $(BUILD_DIR)/$(COMPILER_RT_VERSION).build
	$(MKDIR) -p $(BUILD_DIR)/$(COMPILER_RT_VERSION).build
	tar -xJf $(DOWNLOAD_DIR)/$(COMPILER_RT_VERSION).tar.xz -C $(BUILD_DIR)
	cp Makefile.compiler_rt $(BUILD_DIR)/$(COMPILER_RT_VERSION).src
	$(MKDIR) -p $(BUILD_DIR)/$(COMPILER_RT_VERSION).src/fake-libc
	@echo "void abort(void) __attribute((noreturn));" > \
	$(BUILD_DIR)/$(COMPILER_RT_VERSION).src/fake-libc/stdlib.h
	( cd $(BUILD_DIR)/$(COMPILER_RT_VERSION).src && \
	CC=$(PREFIX)/bin/$(TARGET)-clang make -f Makefile.compiler_rt )
	$(MKDIR) -p $(PREFIX)/lib/clang/$(LLVM_VERSION_NO)/lib
	( cd $(BUILD_DIR)/$(COMPILER_RT_VERSION).src && \
	cp libcompiler_rt.*.a $(PREFIX)/lib/clang/$(LLVM_VERSION_NO)/lib  )
	( cd $(PREFIX)/lib/clang/$(LLVM_VERSION_NO)/lib && ls -lh libcompiler_rt.*.a )
